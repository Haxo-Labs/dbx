name: Scheduled Tests

on:
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
    # Run comprehensive tests weekly on Sunday at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of scheduled test to run'
        required: true
        default: 'nightly'
        type: choice
        options:
        - nightly
        - comprehensive
        - stress
        - compatibility

env:
  CARGO_TERM_COLOR: always

jobs:
  nightly-tests:
    name: Nightly Test Suite
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.test_type == 'nightly'
    
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        redis-version: ['6.2', '7.0', '7.2']
        
    services:
      redis:
        image: redis:${{ matrix.redis-version }}-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-redis${{ matrix.redis-version }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run comprehensive tests
      run: |
        cargo test --all --verbose
        cargo test --all --verbose --release
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_TYPE: redis
        
    - name: Run stress tests if they exist
      run: |
        if cargo test --list | grep -q stress; then
          cargo test --all stress -- --ignored
        fi
      env:
        REDIS_URL: redis://localhost:6379

  comprehensive-tests:
    name: Comprehensive Weekly Tests
    runs-on: ${{ matrix.os }}
    if: github.event.schedule == '0 4 * * 0' || github.event.inputs.test_type == 'comprehensive'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        node: [18, 20, 22]
        
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          ~/.pnpm-store
        key: ${{ runner.os }}-${{ matrix.rust }}-node${{ matrix.node }}-${{ hashFiles('**/Cargo.lock', '**/pnpm-lock.yaml') }}
        
    - name: Run Rust tests
      run: cargo test --all --verbose
      env:
        REDIS_URL: redis://localhost:6379
        
    - name: Run TypeScript tests
      working-directory: ./ts
      run: |
        pnpm install
        pnpm test
      env:
        DBX_API_URL: http://localhost:3000

  stress-tests:
    name: Stress Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'stress'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and start services
      run: docker-compose up -d
      
    - name: Wait for services
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3000/health; then
            echo "Services ready!"
            break
          fi
          sleep 2
        done
        
    - name: Run load tests
      run: |
        # Install load testing tools
        sudo apt-get update && sudo apt-get install -y apache2-utils
        
        echo "Running concurrent API tests..."
        ab -n 1000 -c 10 http://localhost:3000/health
        
        echo "Testing Redis operations under load..."
        for i in {1..100}; do
          curl -X POST http://localhost:3000/api/redis/set \
            -H "Content-Type: application/json" \
            -d "{\"key\":\"stress:$i\",\"value\":\"test-$i\",\"expiry\":60}" &
        done
        wait
        
        echo "Verifying data integrity..."
        for i in {1..100}; do
          RESULT=$(curl -s http://localhost:3000/api/redis/get/stress:$i)
          if [[ "$RESULT" != *"test-$i"* ]]; then
            echo "Data integrity check failed for key stress:$i"
            exit 1
          fi
        done
        
    - name: Monitor resource usage
      run: |
        echo "=== Memory Usage ==="
        docker stats --no-stream
        
        echo "=== Redis Info ==="
        docker exec dbx-redis redis-cli info memory
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'compatibility'
    
    strategy:
      matrix:
        redis-version: ['6.0', '6.2', '7.0', '7.2']
        
    services:
      redis:
        image: redis:${{ matrix.redis-version }}-alpine
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Test Redis ${{ matrix.redis-version }} compatibility
      run: |
        echo "Testing compatibility with Redis ${{ matrix.redis-version }}"
        cargo test --all
        
        # Test specific Redis version features
        cargo run --bin dbx-api &
        API_PID=$!
        sleep 5
        
        # Test basic operations
        curl -f http://localhost:3000/health
        curl -X POST http://localhost:3000/api/redis/set \
          -H "Content-Type: application/json" \
          -d '{"key":"compat:test","value":"redis-${{ matrix.redis-version }}","expiry":60}'
        
        RESULT=$(curl -s http://localhost:3000/api/redis/get/compat:test)
        echo "Result: $RESULT"
        
        kill $API_PID
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_TYPE: redis

  memory-leak-tests:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0' || github.event.inputs.test_type == 'comprehensive'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust with nightly for MIRI
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
        
    - name: Install Valgrind
      run: sudo apt-get update && sudo apt-get install -y valgrind
      
    - name: Run MIRI tests
      run: |
        cargo +nightly miri test --lib
      env:
        MIRIFLAGS: -Zmiri-disable-isolation
        
    - name: Run Valgrind tests
      run: |
        cargo build --release --bin dbx-api
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --verbose target/release/dbx-api &
        VALGRIND_PID=$!
        sleep 10
        
        # Perform some operations
        curl -f http://localhost:3000/health || true
        
        kill $VALGRIND_PID || true
      env:
        REDIS_URL: redis://localhost:6379

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0' || github.event.inputs.test_type == 'comprehensive'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Run benchmarks
      run: |
        cargo bench --all
      env:
        REDIS_URL: redis://localhost:6379
        
    - name: Archive benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: target/criterion/
        retention-days: 30

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [nightly-tests, comprehensive-tests, stress-tests, compatibility-tests, memory-leak-tests, performance-benchmarks]
    if: always() && (failure() || cancelled())
    
    steps:
    - name: Notify on failure
      run: |
        echo "Scheduled tests failed or were cancelled"
        echo "Nightly Tests: ${{ needs.nightly-tests.result }}"
        echo "Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
        echo "Stress Tests: ${{ needs.stress-tests.result }}"
        echo "Compatibility Tests: ${{ needs.compatibility-tests.result }}"
        echo "Memory Leak Tests: ${{ needs.memory-leak-tests.result }}"
        echo "Performance Benchmarks: ${{ needs.performance-benchmarks.result }}"
        
        # Here you could add Slack/Discord/email notifications
        # Example with curl to a webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"DBX scheduled tests failed"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}