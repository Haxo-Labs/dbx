name: Rust Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build workspace
      run: cargo build --verbose --all
      
    - name: Run unit tests
      run: cargo test --verbose --all --lib
      env:
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: cargo test --verbose --all --test "*"
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_TYPE: redis
        HOST: 127.0.0.1
        PORT: 3000
        POOL_SIZE: 10
        LOG_LEVEL: INFO
        
    - name: Run doc tests
      if: matrix.rust == 'stable'
      run: cargo test --verbose --all --doc
      env:
        REDIS_URL: redis://localhost:6379

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: docker-compose build
      
    - name: Start services
      run: docker-compose up -d
      
    - name: Wait for services to be ready
      run: |
        echo "Waiting for DBX API to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health; then
            echo "DBX API is ready!"
            break
          fi
          echo "Attempt $i failed, waiting 2 seconds..."
          sleep 2
        done
        
    - name: Run tests in Docker
      run: docker-compose exec -T dbx-api cargo test --verbose
      
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3000/health
        
        # Test Redis set operation
        curl -f -X POST http://localhost:3000/api/redis/set \
          -H "Content-Type: application/json" \
          -d '{"key":"test:ci","value":"github-actions","expiry":60}'
          
        # Test Redis get operation
        curl -f http://localhost:3000/api/redis/get/test:ci
        
    - name: Check logs for errors
      if: failure()
      run: |
        echo "=== DBX API Logs ==="
        docker-compose logs dbx-api
        echo "=== Redis Logs ==="
        docker-compose logs redis
        
    - name: Clean up
      if: always()
      run: docker-compose down -v

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install --locked cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Check for vulnerabilities in dependencies
      run: cargo audit --deny warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
      
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_TYPE: redis
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Run benchmarks
      run: cargo bench --all
      env:
        REDIS_URL: redis://localhost:6379
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true